// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
  SHELTER_MANAGER
}

enum Sex {
  MALE
  FEMALE
  UNKNOWN
}

model User {
  id                  String    @id
  email               String    @unique
  name                String
  emailVerified       Boolean @default(true)
  role                Role  @default(CUSTOMER)
  createdAt           DateTime
  updatedAt           DateTime
  phoneNumber           String? @unique
  sessions            Session[]
  accounts            Account[]
  shelter             Shelter?

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Shelter {
  id Int @id @default(autoincrement())
  shelterName           String?
  location              String?
  userId                String @unique
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  isVerified             Boolean @default(false)
  @@map("shelter")
}

model Animals{
  id Int @id @default(autoincrement())
  name                   String
  species                String
  sex                    Sex          @default(UNKNOWN)
  description            String @db.Text
  @@map("animals")

}

model LostPets{
  id String @id
  name String
  description String
  images  Bytes?
  @@map("lostpets")

}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
