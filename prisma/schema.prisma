// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  customer
  shelter_manager
}

enum Sex {
  male
  female
  unknown
}

enum Status {
  available
  processing
  adopted
}

model User {
  id             String    @id
  email          String    @unique
  name           String
  emailVerified  Boolean   @default(false)
  role           Role      @default(customer)
  createdAt      DateTime
  updatedAt      DateTime
  phoneNumber    String?   @unique
  location       String?
  isVerifiedUser Boolean   @default(false)
  sessions       Session[]
  accounts       Account[]
  shelter        Shelter?

  image String?

  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  scope String?

  @@map("account")
}

model Shelter {
  id     Int       @id @default(autoincrement())
  userId String    @unique
  
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  animal Animals[]

  @@map("shelter")
}

model Animals {
  id          Int      @id @default(autoincrement())
  name        String
  species     String
  size        String?
  sex         Sex      @default(unknown)
  status      Status   @default(available)
  description String   @db.Text
  age         String
  dominantBreed String?
  arrivedAtShelter String?
  shelterId   String

  shelter     Shelter? @relation(fields: [shelterId], references: [userId], onDelete: Cascade)

  @@map("animals")
}

model LostPets {
  id          String @id
  name        String
  description String
  images      Bytes?

  @@map("lostpets")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
