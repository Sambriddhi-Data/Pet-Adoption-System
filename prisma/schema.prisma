// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  customer
  shelter_manager
}

enum Sex {
  male
  female
  unknown
}

enum Status {
  available
  processing
  adopted
}

enum VaccinationStatus {
  vaccinated
  needsSecondVaccination
  notVaccinated
  unknown
}

enum NeuteredStatus {
  neutered
  notNeutered
  pending
}

enum HealthIssues {
  none
  blind
  deaf
  missing_limbs
  medication_required
  others
}

enum HouseTrainedStatus {
  fully
  almost
  not_trained
}

model User {
  id             String    @id
  email          String    @unique
  name           String
  emailVerified  Boolean   @default(false)
  user_role      Role      @default(customer)
  createdAt      DateTime
  updatedAt      DateTime
  phoneNumber    String?   @unique
  location       String?
  isVerifiedUser Boolean   @default(false)
  sessions       Session[]
  accounts       Account[]
  shelter        Shelter?

  image String?

  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  role Role @default(customer)

  adoptionProfile AdoptionProfile?

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  scope String?

  @@map("account")
}

model Shelter {
  id          String    @id @default(cuid())
  userId      String    @unique
  shelterDesc String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  animal      Animals[]

  @@map("shelter")
}

model Animals {
  id               String  @id @default(cuid())
  name             String
  species          String
  size             String?
  sex              Sex     @default(unknown)
  status           Status  @default(available)
  description      String  @db.Text
  age              String?
  dominantBreed    String?
  arrivedAtShelter String?
  shelterId        String

  vaccinationStatus  VaccinationStatus?
  neuteredStatus     NeuteredStatus?
  dateDewormed       String?
  healthIssues       HealthIssues?
  otherHealthIssues  String?
  notes              String?
  social             String?
  personalitySummary String?
  houseTrained       HouseTrainedStatus

  image String[]

  shelter Shelter? @relation(fields: [shelterId], references: [userId], onDelete: Cascade)

  @@map("animals")
}

model LostPets {
  id          String   @id @default(cuid())
  name        String
  phoneNumber String
  location    String
  description String
  image       String[]

  @@map("lostpets")
}

model AdoptionProfile {
  id String @id @default(uuid())

  image                      String[]
  home_situation             String?
  outside_space              String?
  household_setting          String?
  household_typical_activity String?
  min_age                    Int?
  age                        Boolean  @default(false)

  flatmate           Boolean @default(false)
  allergy            Boolean @default(false)
  other_animals      Boolean @default(false)
  other_animals_info String?
  neuter_status      String?
  lifestyle          String?
  move_holiday       String?
  experience         String?
  agreement          Boolean @default(false)
  other_information  String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("adoptionprofile")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
